"""Routing logic for the cognitive lattice.

This module implements a small routing engine that moves packets through the
network generated by :mod:`cognitive_network`. Nodes 4-7 and the internal
centroid ("IC") represent the more deliberate *System 2* processing mode. A
packet must build sufficient confidence before exiting these nodes. Confidence
slowly accumulates while a packet stays in a System 2 node and increases only
slightly when traversing to other nodes.
"""

from __future__ import annotations

import random
from collections import defaultdict

import networkx as nx


class RoutingEngine:
    """Route packets through a cognitive lattice.

    Parameters
    ----------
    lattice:
        Directed graph representing the lattice. Nodes may define a
        ``threshold`` attribute used for confidence gating in System 2 nodes.
    """

    #: Nodes considered part of the slow, deliberate System 2 processing mode.
    _SYSTEM2_NODES = {4, 5, 6, 7, "IC"}

    def __init__(self, lattice: nx.DiGraph):
        self.lattice = lattice
        self.visit_counts: defaultdict[int, int] = defaultdict(int)
        self.transition_log: list[dict] = []

    # ------------------------------------------------------------------
    # Helper methods
    def _select_agent(self, node):
        # Map tetrahedral subsets to agents
        if node in [0, 1, 2, 3]:
            return "AgentA"
        if node in [4, 5, 6, 7]:
            return "AgentB"
        if node == "IC":
            return "AgentC1"
        if node == "EC":
            return "AgentC2"
        return "Unknown"

    # ------------------------------------------------------------------
    def decide_next(self, current, packet):
        """Decide the next node for a packet.

        If the packet resides in a System 2 node and its confidence is below the
        node's ``threshold`` value, it will remain in place while the confidence
        value increases by ``0.05``. Once the threshold is met (or if the node is
        not part of System 2) a random successor is chosen and confidence
        increases slightly (``+0.02``).
        """

        threshold = self.lattice.nodes[current].get("threshold", 0.0)
        successors = list(self.lattice.successors(current))

        # Stay put in System 2 until confidence passes the node's threshold
        if current in self._SYSTEM2_NODES and packet["confidence"] < threshold:
            packet["confidence"] = min(1.0, packet["confidence"] + 0.05)
            return current

        if not successors:
            return current

        packet["confidence"] = min(1.0, packet["confidence"] + 0.02)
        return random.choice(successors)

    # ------------------------------------------------------------------
    def route_packet(self, packet):
        """Move a packet one step and record transition details."""

        current = packet["location"]
        confidence_before = packet["confidence"]
        next_node = self.decide_next(current, packet)

        self.transition_log.append(
            {
                "agent": self._select_agent(current),
                "from": current,
                "to": next_node,
                "confidence_before": confidence_before,
                "confidence_after": packet["confidence"],
            }
        )

        packet["location"] = next_node
        self.visit_counts[next_node] += 1
        return packet

    # ------------------------------------------------------------------
    def run(self, packets, max_steps=100):
        """Simulate routing until all packets reach ``EC`` or steps exhausted."""

        for _ in range(max_steps):
            for p in packets:
                if p["location"] != "EC":
                    self.route_packet(p)
        return packets
